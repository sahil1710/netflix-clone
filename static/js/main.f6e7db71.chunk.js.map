{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovie","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6e7db71.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovie] = useState([]);\n\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  // a snippet of code which runs based on a specific condition\n  useEffect(() => {\n    // if [], run once when the row loads, and dont run again\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovie(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row-imgs\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id} //optimization for big dataset\n            onClick={() => handleClick(movie)}\n            className={`row-img ${isLargeRow && \"row-imgLarge\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = \"9bd4bcdf9a7d452a40cb9c8fe5ece24f\";\n\nconst requests = {\n    fetchTrending: '/trending/movie/week?api_key=' + API_KEY,\n    fetchNetflixOriginals: '/discover/tv?api_key='+ API_KEY+'&with_networks=213',\n    fetchTopRated: '/movie/top_rated?api_key='+ API_KEY+'&language=en-US',\n    fetchActionMovies: '/discover/movie?api_key='+ API_KEY+'&with_genres=28',\n    fetchComedyMovies: '/discover/movie?api_key='+ API_KEY+'&with_genres=35',\n    fetchHorrorMovies: '/discover/movie?api_key='+ API_KEY+'&with_genres=27',\n    fetchRomanceMovies: '/discover/movie?api_key='+ API_KEY+'&with_genres=10749',\n    fetchDocumentaries: '/discover/movie?api_key='+ API_KEY+'&with_genres=99',\n}\n\nexport default requests;","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport './Banner.css';\n\nfunction Banner() {\n    const [movie, setMovie] = useState([]);\n\n    // a snippet of code which runs based on a specific condition\n    useEffect(() => {\n        // if [], run once when the row loads, and dont run again\n        async function fetchData() {\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            setMovie(request.data.results[\n                Math.floor(Math.random() * request.data.results.length - 1)\n            ]);\n            return request;\n        }\n        fetchData();\n    }, []);\n\n    function truncate(str, n){\n        return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\n    }\n\n    return (\n        <header className=\"banner\"\n            style = {{\n                backgroundSize: \"100% 100%\",\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n                backgroundPosition: \"center center\",\n            }}\n        >\n            <div className=\"banner-content\">\n                <h1 className=\"banner-title\">\n                    {movie?.title || movie?.name || movie.original_name}\n                </h1>\n\n                <div className=\"banner-buttons\">\n                    <button className=\"banner-button\">Play</button>\n                    <button className=\"banner-button\">My list</button>\n                </div>\n                <h1 className=\"banner-des\">\n                    {truncate(movie?.overview,150)}\n                </h1> \n\n            </div>\n            <div className=\"fadebottom\"/>\n        </header>\n    )\n}\n\nexport default Banner\n","import React, { useState, useEffect} from \"react\";\nimport './Nav.css';\n\nfunction Nav() {\n    const [show, handleShow] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", ()=> {\n            if (window.scrollY > 100){\n                handleShow(true);\n            }\n            else handleShow(false);\n        });\n        return () => {\n            window.removeEventListener(\"scroll\");\n        };\n    }, [])\n  return (\n    <div className= {`nav ${show && \"nav-black\"}`}>\n      <img\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\n        alt=\"Netflix logo\"\n        className=\"nav-logo\"\n      />\n      \n    </div>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport Banner from './Banner';\nimport Nav from './Nav';\nimport requests from './requests';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row title = \"NETFLIX ORIGINALS\" fetchUrl = {requests.fetchNetflixOriginals} isLargeRow/>\n      <Row title = \"Trending Now\" fetchUrl = {requests.fetchTrending} />\n      <Row title = \"Top Rated\" fetchUrl = {requests.fetchTopRated} />\n      <Row title = \"Action Movies\" fetchUrl = {requests.fetchActionMovies} />\n      <Row title = \"Horror Movies\" fetchUrl = {requests.fetchHorrorMovies} />\n      <Row title = \"Comedy Movies\" fetchUrl = {requests.fetchComedyMovies} />\n      <Row title = \"Romance Movies\" fetchUrl = {requests.fetchRomanceMovies} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}